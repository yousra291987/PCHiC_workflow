## -----------------------------------------------------------------------------
## An automated Capture-HiC workflow for QC, significant interaction detection,
# and 3D chromatin topology analysis
## -----------------------------------------------------------------------------

# need a:
# module load snakemake/7.8.3-foss-2020b

# run examples:
# snakemake --dry-run
#snakemake -c 4  --use-envmodules

# create report:
# snakemake --report snakemake_report.html

# need a fasta file per Chromosome for hicup-digester:
#faidx -x GRCm39.primary_assembly.genome.fa

## -----------------------------------------------------------------------------
##  globals
## -----------------------------------------------------------------------------
datadir = "/Path/To/Output_Test_data"
basedir= "/Path/To/PCHiC_workflow"
configFilePath="/Path/To/Output_Test_data/hicup.config"

SampleName = "Test_Data"
UCSCgenome = "MM10"
RE= "HindIII"
outPath=f"{datadir}/{SampleName}"
design=f"{basedir}/MM10_HindIII_design"
configDigest="Genome_Digest_mm10_HindIII.config"
Rmod = "R-BioC/4.2-3.16-foss-2020b"
Fancmod="fanc/0.9.26"
Pandocmod = "Pandoc/2.10"
Rbin = "R CMD BATCH --no-restore --no-save"
Insulation="fanc insulation"
ncpu = 20
## -----------------------------------------------------------------------------
##  default rules to run
## -----------------------------------------------------------------------------
rule all:
     input:
       "flags/HICUP.done",
       "flags/Capture_efficiency.done",
       "flags/Chicago.done",
       "flags/ChiCMaxima.done",
       "flags/hicFiles.done",
       expand("{outPath}/{SampleName}.insulation", outPath=outPath, SampleName=SampleName)


## -----------------------------------------------------------------------------
##  Run Hicup (HiC and Capture HiC library quality controle) 
## -----------------------------------------------------------------------------
rule HICUP:
    input:
        script =expand("{basedir}/scripts/00_CaptureHiC_library_qualityControl.r",basedir=basedir),
        configFile={configFilePath},
        digested =expand("{basedir}/{UCSCgenome}_{RE}.txt",basedir=basedir,UCSCgenome=UCSCgenome,RE=RE)
    output:
        rout ="Rout/HICUP.Rout",
        done="flags/HICUP.done"
    shell:
        '''module load {Rmod};set -euo pipefail;mkdir -p Rout flags;{Rbin} "--args hicup.config.file='{input.configFile}' output.Dir='{outPath}' sample='{SampleName}' digested='{input.digested}'" {input.script} {output.rout}; touch {output.done}'''
        

## -----------------------------------------------------------------------------
##  Run Capture efficiency control "Promoter Capture HiC"
## -----------------------------------------------------------------------------
rule Capture_efficiency:
    input:
        script =expand("{basedir}/scripts/00_CaptureHiC_CaptureEfficiency_Control.r",basedir=basedir),
        rmap=expand("{basedir}/MM10_HindIII_design/mm10_HindIII_ProbeInfo.txt",basedir=basedir),
        baitmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.baitmap",basedir=basedir),
        mapped="Rout/HICUP.Rout",
        prev= "flags/HICUP.done"
    output:
        rout = "Rout/Capture_efficiency.Rout",
        done = "flags/Capture_efficiency.done"
    shell:
        '''module load {Rmod};set -euo pipefail;mkdir -p Rout flags;{Rbin} "--args Dir='{outPath}' Sample.Name='{SampleName}' rmap.file='{input.rmap}' baitmap.file='{input.baitmap}' bam.file='{input.mapped}'" {input.script} {output.rout}; touch {output.done}'''
 
 
## -----------------------------------------------------------------------------
##  Run Chicago to identify Chromatin loops in Capture HiC
## -----------------------------------------------------------------------------
rule Chicago:
    input:
        script = expand("{basedir}/scripts/01_PreparingAll_donstreamFiles_ChicagoV1.24_R4.2.r",basedir=basedir),
        rmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.rmap",basedir=basedir),
        baitmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.baitmap",basedir=basedir),
        mapped="Rout/Capture_efficiency.Rout",
        prev="flags/Capture_efficiency.done"
    output:
        rout = "Rout/Chicago.Rout",
        done = "flags/Chicago.done"
    shell:
        '''module load {Rmod};set -euo pipefail;mkdir -p Rout flags;{Rbin} "--args Dir='{outPath}' Design.Dir='{design}' Sample.Name='{SampleName}' rmap.file='{input.rmap}' baitmap.file='{input.baitmap}' bam.file='{input.mapped}'" {input.script} {output.rout}; touch {output.done}'''
        

## -----------------------------------------------------------------------------
##  Run ChicMaxima to identify Chromatin loops in Capture HiC
## -----------------------------------------------------------------------------
rule ChiCMaxima:
    input:
        script = expand("{basedir}/scripts/02_ChiCMaxima.r",basedir=basedir),
        rmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.rmap",basedir=basedir),
        baitmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.baitmap",basedir=basedir),
        mapped="Rout/Capture_efficiency.Rout",
        prev="flags/Chicago.done"
    output:
        rout = "Rout/ChiCMaxima.Rout",
        done = "flags/ChiCMaxima.done"
    shell:
        '''module load {Rmod};set -euo pipefail; mkdir -p Rout flags;{Rbin} "--args Dir='{outPath}' Sample.Name='{SampleName}' rmap.file='{input.rmap}' baitmap.file='{input.baitmap}' bam.file='{input.mapped}'" {input.script} {output.rout}; touch {output.done}'''
        
        
## -----------------------------------------------------------------------------
##  Generates hicFiles & identify TADs using arrowhead Algorithm (HiC)
## -----------------------------------------------------------------------------
rule hicFiles:
    input:
        script = expand("{basedir}/scripts/03_Generating_hicFiles_identifyTADs.r",basedir=basedir),
    	rmap=expand("{basedir}/MM10_HindIII_design/mm10_HindIII_ProbeInfo.txt",basedir=basedir),
        baitmap=expand("{basedir}/MM10_HindIII_design/MM10_HindIII.baitmap",basedir=basedir),
        mapped="Rout/HICUP.Rout",
        prev = "flags/HICUP.done"
    output:
        rout = "Rout/hicFiles.Rout",
        hicFile=expand("{outPath}/{SampleName}.hic",outPath=outPath,SampleName=SampleName),
        done = "flags/hicFiles.done"
    shell:
        '''module load {Rmod}; set -euo pipefail; mkdir -p Rout flags; {Rbin} "--args Dir='{outPath}' Sample.Name='{SampleName}' rmap.file='{input.rmap}' baitmap.file='{input.baitmap}' bam.file='{input.mapped}'" {input.script} {output.rout}; test -s "{output.hicFile}"; touch {output.done}'''
        

## -----------------------------------------------------------------------------
## Calculating insulation score using FANC (HiC) using 10kb resolution
## -----------------------------------------------------------------------------
rule InsulationScore:
    input:
        hicFile = expand("{outPath}/{SampleName}.hic",outPath=outPath,SampleName=SampleName),
        hic_done="Rout/hicFiles.Rout",
        prev = "flags/hicFiles.done"
    output:
        InsulFile= expand("{outPath}/{SampleName}.insulation",outPath=outPath,SampleName=SampleName)
    log:
    	"Rout/InsulationScore.log"
    envmodules:
    	f"{Fancmod}"
    shell:
    	''' set -euo pipefail; mkdir -p Rout flags; fanc insulation {input.hicFile}@10kb@KR {output.InsulFile} -g -w 0.5mb 1mb 1.5mb 2mb 2.5m > {log} 2>&1 '''