# capture-hic-pipeline/config/config.yaml
datadir: "data"         # optional if you later refer to raw inputs
outdir:  "results"

genome_build: "mm10"    # for documentation; not used directly yet
enzyme: "HindIII"

design:
  rmap:      "design/mm10_HindIII/mm10_HindIII.rmap"
  baitmap:   "design/mm10_HindIII/mm10_HindIII.baitmap"
  probeinfo: "design/mm10_HindIII/mm10_HindIII_ProbeInfo.txt"

hicup:
  config: "config/hicup.config"          # your HiCUP .conf
  digest: "design/mm10_HindIII/mm10_HindIII_digest.txt"  # or wherever it lives

samples:
  - SampleA
  - SampleB

tools:
  rscript: "Rscript"
  hicup: "hicup"                          # assumes in PATH; otherwise give full path
  bedtools: "bedtools"                    # we’ll use `bedtools bamtobed`
  perl: "perl"
  bam_to_fragments: "scripts/BamToFragments.pl"  # keep it in repo if possible
  python: "python"  # if you want to build the design with ChicagoTools
  chicago_bam2chicago: "chicagoTools/bam2chicago.sh"           # optional
  chicago_make_design: "chicagoTools/makeDesignFiles_py3.py"   # optional
  align2ibed: "scripts/align2ibed.pl"   # put align2ibed.pl in your repo, or give full path
  java: "java"                              # Java runtime
  juicer_tools: "juicer_tools.jar"          # full path to your Juicer Tools JAR
  bam2juicer: "scripts/Bam2Juicer.pl"       # path to Bam2Juicer.pl

chicago:
  force_make_design: false   # true/false
#If you don’t want to rely on chicagoTools, keep the .chinput creation step elsewhere and point the script to existing .chinput in the sample’s output dir.

params:
  fanc_resolution: "10kb"
  fanc_balancing: "KR"
  fanc_windows: ["0.5mb","1mb","1.5mb","2mb","2.5mb"]
  juicer_mem_gb: 10                         # -Xmx memory in GB
  juicer_q: 10                              # pre -q value
  juicer_genome_id: "mm10"                  # genome ID for .hic (e.g., mm10, hg19, hg38)

threads:
  default: 4
